diff -u -N -r linux-4.14.59.orig/drivers/ata/libata-core.c linux-4.14.59/drivers/ata/libata-core.c
--- linux-4.14.59.orig/drivers/ata/libata-core.c	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/drivers/ata/libata-core.c	2018-07-31 14:47:02.368746678 +0200
@@ -5,6 +5,7 @@
  *    		    Please ALWAYS copy linux-ide@vger.kernel.org
  *		    on emails.
  *
+ *  Copyright 2016 bodhi <mibodhi@gmail.com>
  *  Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
  *  Copyright 2003-2004 Jeff Garzik
  *
@@ -5239,7 +5240,7 @@
 	struct ata_port *ap = qc->ap;
 
 	/* Trigger the LED (if available) */
-	ledtrig_disk_activity();
+	ledtrig_disk_activity(qc->ap->port_no);
 
 	/* XXX: New EH and old EH use different mechanisms to
 	 * synchronize EH with regular execution path.
diff -u -N -r linux-4.14.59.orig/drivers/leds/Kconfig linux-4.14.59/drivers/leds/Kconfig
--- linux-4.14.59.orig/drivers/leds/Kconfig	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/drivers/leds/Kconfig	2018-07-31 14:47:02.368746678 +0200
@@ -696,6 +696,106 @@
 	  To compile this driver as a module, choose M here: the module
 	  will be called leds-nic78bx.
 
+config LEDS_TRIGGERS
+ 	bool "LED Trigger support"
+ 	depends on LEDS_CLASS
+ 	help
+ 	  This option enables trigger support for the leds class.
+ 	  These triggers allow kernel events to drive the LEDs and can
+ 	  be configured via sysfs. If unsure, say Y.
+ 
+ 
+ config LEDS_TRIGGER_TIMER
+ 	tristate "LED Timer Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a programmable timer
+ 	  via sysfs. Some LED hardware can be programmed to start
+ 	  blinking the LED without any further software interaction.
+ 	  For more details read Documentation/leds/leds-class.txt.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_ONESHOT
+ 	tristate "LED One-shot Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to blink in one-shot pulses with parameters
+ 	  controlled via sysfs.  It's useful to notify the user on
+ 	  sporadic events, when there are no clear begin and end trap points,
+ 	  or on dense events, where this blinks the LED at constant rate if
+ 	  rearmed continuously.
+ 
+ 	  It also shows how to use the led_blink_set_oneshot() function.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_IDE_DISK
+ 	bool "LED IDE Disk Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by IDE disk activity.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_HEARTBEAT
+ 	tristate "LED Heartbeat Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a CPU load average.
+ 	  The flash frequency is a hyperbolic function of the 1-minute
+ 	  load average.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_BACKLIGHT
+ 	tristate "LED backlight Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled as a backlight device: they
+ 	  turn off and on when the display is blanked and unblanked.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_CPU
+ 	bool "LED CPU Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by active CPUs. This shows
+ 	  the active CPUs across an array of LEDs so you can see which
+ 	  CPUs are active on the system at any given moment.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_GPIO
+ 	tristate "LED GPIO Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	depends on GPIOLIB
+ 	help
+ 	  This allows LEDs to be controlled by gpio events. It's good
+ 	  when using gpios as switches and triggering the needed LEDs
+ 	  from there. One use case is n810's keypad LEDs that could
+ 	  be triggered by this trigger when user slides up to show
+ 	  keypad.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_DEFAULT_ON
+ 	tristate "LED Default ON Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be initialised in the ON state.
+ 	  If unsure, say Y.
+ 
+ comment "iptables trigger is under Netfilter config (LED target)"
+ 	depends on LEDS_TRIGGERS
+ 
+ config LEDS_TRIGGER_TRANSIENT
+ 	tristate "LED Transient Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows one time activation of a transient state on
+ 	  GPIO/PWM based hardware.
+ 	  If unsure, say Y
+
 comment "LED Triggers"
 source "drivers/leds/trigger/Kconfig"
 
diff -u -N -r linux-4.14.59.orig/drivers/leds/trigger/ledtrig-disk.c linux-4.14.59/drivers/leds/trigger/ledtrig-disk.c
--- linux-4.14.59.orig/drivers/leds/trigger/ledtrig-disk.c	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/drivers/leds/trigger/ledtrig-disk.c	2018-07-31 14:47:02.378747068 +0200
@@ -1,6 +1,9 @@
 /*
  * LED Disk Activity Trigger
  *
+ * Copyright 2016 bodhi <mibodhi@gmail.com>
+ * 
+ * Based on
  * Copyright 2006 Openedhand Ltd.
  *
  * Author: Richard Purdie <rpurdie@openedhand.com>
@@ -18,23 +21,36 @@
 #define BLINK_DELAY 30
 
 DEFINE_LED_TRIGGER(ledtrig_disk);
-DEFINE_LED_TRIGGER(ledtrig_ide);
+DEFINE_LED_TRIGGER(ledtrig_ide1);
+DEFINE_LED_TRIGGER(ledtrig_ide2);
 
-void ledtrig_disk_activity(void)
+void ledtrig_disk_activity(int portno)
 {
-	unsigned long blink_delay = BLINK_DELAY;
+        unsigned long blink_delay = BLINK_DELAY;
+
+ 	switch (portno) {
+ 		case 0:
+			led_trigger_blink_oneshot(ledtrig_disk,
+						  &blink_delay, &blink_delay, 0);
+ 		        led_trigger_blink_oneshot(ledtrig_ide1, &blink_delay, &blink_delay, 0);
+ 			break;
+         	case 1:
+			led_trigger_blink_oneshot(ledtrig_disk,
+						  &blink_delay, &blink_delay, 0);
+ 			led_trigger_blink_oneshot(ledtrig_ide2, &blink_delay, &blink_delay, 0);
+ 			break;
+ 		default:
+ 			break;
+ 	}
 
-	led_trigger_blink_oneshot(ledtrig_disk,
-				  &blink_delay, &blink_delay, 0);
-	led_trigger_blink_oneshot(ledtrig_ide,
-				  &blink_delay, &blink_delay, 0);
 }
 EXPORT_SYMBOL(ledtrig_disk_activity);
 
 static int __init ledtrig_disk_init(void)
 {
 	led_trigger_register_simple("disk-activity", &ledtrig_disk);
-	led_trigger_register_simple("ide-disk", &ledtrig_ide);
+ 	led_trigger_register_simple("ide-disk1", &ledtrig_ide1);
+ 	led_trigger_register_simple("ide-disk2", &ledtrig_ide2);
 
 	return 0;
 }
diff -u -N -r linux-4.14.59.orig/drivers/net/phy/marvell.c linux-4.14.59/drivers/net/phy/marvell.c
--- linux-4.14.59.orig/drivers/net/phy/marvell.c	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/drivers/net/phy/marvell.c	2018-07-31 14:47:02.378747068 +0200
@@ -1382,6 +1382,7 @@
 static void m88e1318_get_wol(struct phy_device *phydev,
 			     struct ethtool_wolinfo *wol)
 {
+
 	wol->supported = WAKE_MAGIC;
 	wol->wolopts = 0;
 
@@ -1394,6 +1395,8 @@
 
 	if (marvell_set_page(phydev, MII_MARVELL_COPPER_PAGE) < 0)
 		return;
+
+        printk ("m88e1318_get_wol: phy_id = 0x%x OK\n", phydev->phy_id);
 }
 
 static int m88e1318_set_wol(struct phy_device *phydev,
@@ -1484,6 +1487,8 @@
 	if (err < 0)
 		return err;
 
+	printk ("m88e1318_set_wol: phy_id = 0x%x OK\n", phydev->phy_id);
+
 	return 0;
 }
 
diff -u -N -r linux-4.14.59.orig/drivers/net/phy/phy_device.c linux-4.14.59/drivers/net/phy/phy_device.c
--- linux-4.14.59.orig/drivers/net/phy/phy_device.c	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/drivers/net/phy/phy_device.c	2018-07-31 14:47:02.418748628 +0200
@@ -106,6 +106,8 @@
 	if (device_may_wakeup(&netdev->dev))
 		return false;
 
+	printk ("mdio_bus_phy_may_suspend: TRUE \n");
+
 	return true;
 }
 
@@ -124,6 +126,8 @@
 	if (!mdio_bus_phy_may_suspend(phydev))
 		return 0;
 
+        printk ("mdio_bus_phy_suspend: Suspending the PHY\n");
+
 	return phy_suspend(phydev);
 }
 
@@ -1144,8 +1148,13 @@
 
 	/* If the device has WOL enabled, we cannot suspend the PHY */
 	phy_ethtool_get_wol(phydev, &wol);
-	if (wol.wolopts)
+	if (wol.wolopts) {
+		printk ("WOL was set - NOT suspending the ethernet PHY\n");
 		return -EBUSY;
+	}
+	else {
+		printk ("WOL not set - suspending the ethernet PHY\n");
+	}
 
 	if (phydev->drv && phydrv->suspend)
 		ret = phydrv->suspend(phydev);
diff -u -N -r linux-4.14.59.orig/include/linux/ide.h linux-4.14.59/include/linux/ide.h
--- linux-4.14.59.orig/include/linux/ide.h	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/include/linux/ide.h	2018-07-31 14:47:02.418748628 +0200
@@ -1579,7 +1579,10 @@
 
 static inline void ide_dump_identify(u8 *id)
 {
-	print_hex_dump(KERN_INFO, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+	print_hex_dump(KERN_DEBUG, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+
 }
 
 static inline int hwif_to_node(ide_hwif_t *hwif)
diff -u -N -r linux-4.14.59.orig/include/linux/leds.h linux-4.14.59/include/linux/leds.h
--- linux-4.14.59.orig/include/linux/leds.h	2018-07-28 07:55:45.000000000 +0200
+++ linux-4.14.59/include/linux/leds.h	2018-07-31 14:47:02.428749018 +0200
@@ -1,6 +1,7 @@
 /*
  * Driver model for leds and led triggers
  *
+ * Copyright (C) 2016 bodhi <mibodhi@gmail.com>
  * Copyright (C) 2005 John Lenz <lenz@cs.wisc.edu>
  * Copyright (C) 2005 Richard Purdie <rpurdie@openedhand.com>
  *
@@ -346,9 +347,9 @@
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_DISK
-extern void ledtrig_disk_activity(void);
+extern void ledtrig_disk_activity(int portno);
 #else
-static inline void ledtrig_disk_activity(void) {}
+static inline void ledtrig_disk_activity(int portno) {}
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGER_MTD
